	.syntax	unified         /* Указание синтаксиса языка ассемблера как ARM UAL (Unified Assembler Language) */
	.arch   armv7e-m        /* Указание требуемой архитектуры команд, в нашем случае можно опустить; */
	                        /* Переопределяет ключ -march ассемблера. Рекомендуют указывать. */

/* В данном примере мы работаем исключительно в режиме потока (Thread), в привилегированном режиме. */

/* Директива .section позволяет расположить последующий код или данные в секции с заданными именем.
 * Имена секций используются в скрипте сборщика (ld script) для корректного размещения и сборки программы.
 * Вам могут потребоваться три секции:
 * - .text (.section .text или просто директива .text) - Секция исполняемого кода в ПЗУ (чтение и исполнение).
 * - .rodata (.section .rodata) - Секция неисполняемого кода в ПЗУ (данные, только для чтения).
 * - .data (.section .data или просто директива .data) - Секция неисполняемого кода в ОЗУ (данные для чтения и записи, и исполнения*).
 * - .bss (.section .bss) - 
 * Если MPU не настроен, код может быть выполнен из любой из этих секций.
 * Директиву .section (а так же .text, .data, .bss) можно использовать многократно, 
 * содержимое соответствующий секций будет объединено, и расположено по порядку, в соответствующей секции памяти.
 */

# Секция .text, кода, размещаемая в ROM
	.text                           /* Указваем секцию .text в качестве назначения */
	.thumb                          /* Выбираем набор инструкций (ARM ISA) Thumb */

/* Наш стартовый скрипт требует, чтобы мы объявили глобальноую метку _start, как начало нашей программы. 
 * После выполнения инициализации, он перейдёт к ней с помщью `bl _start`.
 */
	.global	_start                  /* С помощью .global определяем метку глобальной, т.е. доступной любому модулю */
	.type 	_start, %function       /* Определяет символ _start как функцию (метаданные для отладчика) */
_start:
	/* Тут может располгатаься наш код дополнительной инициализации. */
	/* С такими аргументами выполняется инициализация, описанная в стартовом файле.
	 * Значения символов вычисляются сборщиком (linker), см. скрипт сборки gcc.ld */
	@ ldr	a1, =__etext
	@ ldr	a2, =__data_start__
	@ ldr	a3, =__data_end__
	@ bl	raminit
	/* Для загрузки адресов используется псеводинструкция (псевдооперация `LDR=`),
	 * которая будет заменена на `LDR Rd,[PC, #<imm>]`, загружающая адрес косвенным образом.
	 * В свою очередь, указанный адрес будет расположен в пуле литералов.
	 * Для загрузки адреса не может быть использована инструкция MOV, так как она
	 * принимает только 8 бит непосредственного значения (0-255), 
	 * чего может быть не достаточно для кодирования адреса.
	 * (P.S. так же стоит учитывать последовательность трансляции и сборки)
	 */

	@ Просто проверял значения метки
	@ldr	r0, =var0_end
	@ldr	r1, [r0]

	@ Вызов функции raminit
	ldr	a1, =var0               @ Адрес секции ROM
	ldr	a2, =buffer             @ Адрес секции RAM
	ldr	a3, =buffer_end         @ Адрес конца секции RAM
	bl	raminit                 @ см. raminit.s
	
	@ Тест 2: пустая секция
	ldr	a1, =var0               @ Адрес секции ROM
	ldr	a2, =buffer             @ Адрес секции RAM
	ldr	a3, =buffer             @ Адрес конца секции RAM
	bl	raminit                 @ см. raminit.s

	b	main			@ Бытует мнение, что не должно быть неиспользуемых меток
	.pool	@.ltorg			@ Разместить текущую область литералов здесь.
					@ Тут будут записаны адреса памяти используемые в ldr.
					@ Размещается так, чтобы константы не выполялись как инструкции
					@ (выше безусловный переход - это безопасно).
					@ Обычно это делают в большой программе, чтобы литералы находились 
					@ в досягаемости инструкций, которым они нужны (LDR и подобные).
					@ В ином случае - будут размещены в конце секции.
					@ (см. main.lst)
	.size	_start, . - _start	@ Добавить к отладочной информации размер функции.
	@ Это совместимый вариант объявления символа как функции, используемый, 
	@ как с ассемблером GNU, так и armclang, в отличии от директив 
	@ .func и .endfunc, поддериживаемых только ассемблером GNU.
	@ (Речь о совместном использовании .type и .size)

/* К примеру, объявим глобальную функцию main. Для этого нам потребовалось: 
 * - С помощью директивы .thumb_func, указать комплятору, что далее последует функция в наборе команд Thumb.
 *   Необходима для генерации корректного кода при взаимодействии между наборами инструкций ARM и Thumb.
 *   Следует указывать, даже если взаимодействие не используется. (Кроме EABI, игнорирует)
 *   Размещает начало функции, задаёт метке корректный адрес для взаимодействия (+1).
 * - Пометить символ как глобальный, с помощью .global (для локальных функций не требуется).
 * - С помощью .type пометить символ как фнукцию (%function). Эту информацию интерпретирует только отладчик.
 * - Указать метку `main:`
 * Обратите внимание, на имя смвола в директивах .global и .type. 
 * Технически, эти директивы можно использовать в любом месте. Не обзятально непосредственно перед меткой.
 */
	.thumb_func			/* Пометить как функцию в наборе инструкций Thumb */
	.global main			/* Экспортировать символ main */
	.type   main, %function		/* Сообщить отладчику, что это функция */
main:                                   @ Начало `main`
	mov	r0, #0
	mov	r1, r0
	bl 	ex_moves
	@bl	ex_arithmetic
	@bl	ex_memls
	@bl	ex_condition
	@bl	ex_branch
	@bl	ex_cycles
stop:	b	stop			@ Остановить выполнение программы тут
	.size	main, . - main		/* Размер функции main; конец функции */


# Размещаем тестовые данные в ПЗУ
	.section .rodata @ разместить последующее в секции .rodata (ПЗУ, данные только для чтения, см. gcc.ld)
	.align	2       @ Учтём требование функции к выравниванию.
var0:	.word	0x03020100, 0x07060504, 0x0B0A0908, 0x0F0E0D0C
	.word	0x13121110, 0x17161514, 0x1B1A1918, 0x1F1E1D1C
	.word	0x23222120, 0x27262524, 0x2B2A2928, 0x2F2E2D2C
	.word	0x33323130, 0x37363534, 0x3B3A3938, 0x3F3E3D3C
	.short	0xAA55

	.align	2       @ Выровнять (следующий) адрес на границе кратной 2^2 = 4 байт. (В ARM GAS .align эквивалентно .p2align, а не .balign).
var0_end:
	.set 	var0_size, var0_end - var0


# Initialized variables in RAM
	.data           @ Разместить последующее в секции .data (синоним .section .data)
	                @ Тут мы ничего не разместили


# Not initialized variables (RAM)
	.bss            @ Секция неинициализированных переменных в ОЗУ
	.align	2        @ Выровнять buffer по адресу кратному 4
	@.align	4       @ Выровнять начало buffer по адресу кратному 16 (2^4) байт. (для проверки; не требуется)
buffer:
	.ifdef	var0_size
	.space	var0_size
	.endif
	.align	2
buffer_end:


	.end		@ Конец файла. Всё, что ниже, - транслироваться не будет.
